<div class="heading">
  <h1>Find a Foodtruck</h1>


  {{#if loggedIn}}
  <h2>Welcome {{user.username}}</h2>
  {{/if}}

  {{!-- search bar --}}
  <form onsubmit="handlesubmit(event)">
    {{!-- <label  for="searchbar"></label> --}}
    <input type="text" name="searchbar" id="searchbar" value="">
    <button type="submit" class="hidden"></button>
  </form>


  <div id='map'></div>
  <script>
    const inputText = document.getElementById('searchbar').value;

    const getFavorites = () => {

      return axios.get('/api/getuserfavorites').then(response => {
        if (!response.data.likes) {
          return genericMarkers();
        }
        const favoriteTrucks = response.data.likes
        console.log('favorite trucks: ', favoriteTrucks);
        return favoriteTrucks;
      });
    }

    function handlesubmit(e) {
      console.log('function called logged in?????')
      e.preventDefault()
      let test = document.querySelectorAll('.marker, .marker-favorite');
      test.forEach(el => {
        el.remove();
      });
      console.log('handelsubmit has been called');
      const searchText = document.getElementById('searchbar').value;
      const searchCheck = searchText.trim().split(' ')
      console.log('--------------------- ', searchText.trim().split(' '))
      if (!searchCheck[0]) {
        console.log('Empty')
        getMarkers()
      }
      else {
        axios.post(`/api/searchtext`, { searchCheck })
          .then(data => {

            console.log('FROM BACKEND data.data: ', data.data);
            if (!data.data[0]) { return genericMarkersWithSearch(); }
            const favoriteTrucks = data.data[0];
            const nonFavoriteTrucks = data.data[1][0];

            console.log('rendering non favorite markers')

            nonFavoriteTrucks.forEach(x => {
              console.log('single truck here', x)
              const markerDiv = document.createElement('div')
              markerDiv.className = 'marker';
              new mapboxgl.Marker(markerDiv).setLngLat(x.locations)
                .setPopup(new mapboxgl.Popup({ offset: 25, closeOnClick: true })
                  .setHTML('<a href=/' + x._id + '/truck><h3>' + x.name + '</h3></a><p>' + x.cuisine + '</p>'))
                .addTo(map);
            })


            favoriteTrucks.forEach(x => {
              console.log('liked trucks ', x)
              const favMarker = document.createElement('div')
              favMarker.className = 'marker-favorite';
              new mapboxgl.Marker(favMarker).setLngLat(x.locations)
                .setPopup(new mapboxgl.Popup({ offset: 25, closeOnClick: true })
                  .setHTML('<a href=/' + x._id + '/truck><h3>' + x.name + '</h3></a><p>' + x.cuisine + '</p>'))
                .addTo(map);
            });

          });
      }

    }




    const getMarkers = async () => {
      console.log('HELLO')
      const favoriteTrucks = await getFavorites();
      console.log('HERE HERE: ', favoriteTrucks);
      if (!favoriteTrucks) {
        return genericMarkers();
      }
      axios.get('/api/findtrucks').then(response => {
        console.log('ALLLLL trucks: ', response.data)

        const nonFavoriteTrucks = response.data.filter(el => {
          if (favoriteTrucks.includes(el._id)) {
            return false;
          } return true;
        })
        const likedTrucks = response.data.filter(el => {
          if (favoriteTrucks.includes(el._id)) {
            return true;
          } return false;
        })

        nonFavoriteTrucks.forEach(x => {

          const markerDiv = document.createElement('div')
          markerDiv.className = 'marker';
          new mapboxgl.Marker(markerDiv).setLngLat(x.locations)
            .setPopup(new mapboxgl.Popup({ offset: 25, closeOnClick: true })
              .setHTML('<a href=/' + x._id + '/truck><h3>' + x.name + '</h3></a><p>' + x.cuisine + '</p>'))
            .addTo(map);
        })


        likedTrucks.forEach(x => {
          console.log('liked trucks ', x)
          const favMarker = document.createElement('div')
          favMarker.className = 'marker-favorite';
          new mapboxgl.Marker(favMarker).setLngLat(x.locations)
            .setPopup(new mapboxgl.Popup({ offset: 25, closeOnClick: true })
              .setHTML('<a href=/' + x._id + '/truck><h3>' + x.name + '</h3></a><p>' + x.cuisine + '</p>'))
            .addTo(map);
        })


      }).catch(err => {
        console.log(err)
      })
    }

    const genericMarkers = () => {
      axios.get('/api/findtrucks').then(response => {
        console.log('THIS IS THE RESPONSE ', response);
        const allTrucks = response.data.slice(1);
        console.log(allTrucks);
        allTrucks.forEach(x => {
          console.log(x);
          const markerDiv = document.createElement('div')
          markerDiv.className = 'marker';
          new mapboxgl.Marker(markerDiv).setLngLat(x.locations)
            .setPopup(new mapboxgl.Popup({ offset: 25, closeOnClick: true })
              .setHTML('<a href=/' + x._id + '/truck><h3>' + x.name + '</h3></a><p>' + x.cuisine + '</p>'))
            .addTo(map);
        })
      });
    };

    const genericMarkersWithSearch = () => {
      console.log('function generic markers is called. Logged out')
      const searchText = document.getElementById('searchbar').value;
      const searchCheck = searchText.trim().split(' ')

      axios.get(`/api/searchtext`, { searchCheck }).then(response => {
        console.log('NEW RESPONSE: ', response.data)
        response.data.forEach(x => {

          const markerDiv = document.createElement('div')
          markerDiv.className = 'marker';
          new mapboxgl.Marker(markerDiv).setLngLat(x.locations)
            .setPopup(new mapboxgl.Popup({ offset: 25, closeOnClick: true })
              .setHTML('<a href=/' + x._id + '/truck><h3>' + x.name + '</h3></a><p>' + x.cuisine + '</p>'))
            .addTo(map);
        })
      });
    }


    if (!inputText) {
      mapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94cHJvamVjdCIsImEiOiJjazJ6eXNqcWIwajd4M21zMDlxamdxYTZpIn0.2yA5cyZqIRxwYPwxku-tUQ';
      var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapboxproject/ck3904d080f171ctbb7rqokg0',
        center: [13.40, 52.52],
        zoom: 12

      });

      map.addControl(new mapboxgl.GeolocateControl({
        positionOptions: {
          enableHighAccuracy: true
        },
        trackUserLocation: true
      }));
      getMarkers();
    }



  </script>
</div>

<div class="account-deletion">
  {{#if loggedIn}}
  <form action="/userprofile/{{user._id}}/delete" method="post">
    <button class="delete-button">Delete Your Account</button>
  </form>
  {{/if}}
</div>
{{!-- response.forEach(truck => {
        const coordinates = truck.locations;
        new mapboxgl.Marker().setLngLat(coordinates).addTo(map)
      }) --}}


{{!-- const getFavorites = () => {

      return axios.get('/api/getuserfavorites').then(response => {
        if (!response.data.likes) {
          return genericMarkers();
        }
        const favoriteTrucks = response.data.likes
        console.log('favorite trucks: ', favoriteTrucks);
        return favoriteTrucks;
      });
    }

    async function handlesubmit(e) {
      e.preventDefault()
      const favoriteTrucks = await getFavorites();
      console.log(favoriteTrucks);
      console.log('handelsubmit has been called');
      const searchText = document.getElementById('searchbar').value;
      axios.get(`/api/${searchText}`)
        .then(data => {
          console.log("search result: ", data.data);
          const foundTruck = data.data;

          const likedTrucks = foundTruck.filter(el => {
            if (favoriteTrucks.includes(el._id)) {
              return true;
            } return false;
          })
          const nonFavoriteTrucks = foundTruck.filter(el => {
            if (favoriteTrucks.includes(el._id)) {
              return false;
            } return true;
          })
          console.log('SEARCHED non favorite: ', nonFavoriteTrucks)

        })
    } --}}